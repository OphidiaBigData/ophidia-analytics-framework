<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE primitive SYSTEM "ophidiaprimitive.dtd">
<primitive name="oph_bit_aggregate" version="1.0">
    <info>
        <abstract>[Behaviour]
Aggregates bit array tuples applying a bit operation.

[Parameters]
- input data type : not used.
- output data type : not used.
- measure : input measure.
- operator : type of operator
             -- &apos;INVALID_BIT_OP&apos; : invalid
             -- &apos;OPH_BIT_AND&apos; : bitwise AND
             -- &apos;OPH_BIT_OR&apos; : bitwise OR
             -- &apos;OPH_BIT_XOR&apos; : bitwise XOR
             -- &apos;OPH_BIT_NAND&apos; : bitwise NAND
             -- &apos;OPH_BIT_NOR&apos; : bitwise NOR
             -- &apos;OPH_BIT_XNOR&apos; : bitwise XNOR
             -- &apos;OPH_BIT_GREATER_THAN&apos; : &gt;
             -- &apos;OPH_BIT_GREATER_OR_EQUAL_TO&apos; : &gt;=
             -- &apos;OPH_BIT_LESS_THAN&apos; : &lt;
             -- &apos;OPH_BIT_LESS_OR_EQUAL_TO&apos; : &lt;=

[Return type]
Bit-array.

[Examples]
Bitwise AND between bit-measures.
oph_bit_aggregate(bit_measure,&apos;OPH_AND&apos;)</abstract>
        <author>CMCC</author>
        <creationdate>19/12/2016</creationdate>
        <license url="http://www.gnu.org/licenses/gpl.txt">GPLv3</license>
        <return type="bit-array" />
	<operation type="aggregate"/>
    </info>
    <args>
	<argument type="oph_type" mandatory="yes">input data type</argument>
	<argument type="oph_type" mandatory="yes">output data type</argument>
	<argument type="bit-array" mandatory="yes">measure</argument>
        <argument type="oph_bit_op" mandatory="no" default="'oph_bit_and'" values="'INVALID_BIT_OP'|'OPH_BIT_AND'|'OPH_BIT_OR'|'OPH_BIT_XOR'|'OPH_BIT_NAND'|'OPH_BIT_NOR'|'OPH_BIT_XNOR'|'OPH_BIT_GREATER_THAN'|'OPH_BIT_GREATER_OR_EQUAL_TO'|'OPH_BIT_LESS_THAN'|'OPH_BIT_LESS_OR_EQUAL_TO'">operator</argument>
    </args>
</primitive>
